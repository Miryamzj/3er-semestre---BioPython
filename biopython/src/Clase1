PROGRAMACI√ìN ORIENTADA A OBJETOS

La programaci√≥n orientada a objetos (POO) es un paradigma de programaci√≥n que organiza el c√≥digo en "objetos" que combinan datos y funciones relacionadas. Es como modelar el mundo real dentro del c√≥digo.

üß± ¬øQu√© es un objeto?
Un objeto es una entidad que tiene caracter√≠sticas (datos) y puede realizar acciones (m√©todos).

Ejemplo:
Un Perro puede tener:

Atributos: nombre, raza, edad

M√©todos: ladrar(), comer(), dormir()

üß© Conceptos clave:
Concepto	¬øQu√© es?	Ejemplo
Clase:	Es el molde o plano para crear objetos. Conjunto de objetos. class Perro:
Objeto:	Una instancia concreta de una clase.	mi_perro = Perro()
Atributos:	Las caracter√≠sticas de un objeto.	mi_perro.nombre = "Fido"
M√©todos:	Las funciones que pertenecen a un objeto. Cuando la funci√≥n est√° ligada a un objeto, entonces es un m√©todo.	mi_perro.ladrar()
Encapsulamiento	Ocultar los detalles internos de un objeto.	(Proteger datos internos)
Herencia:	Una clase puede heredar de otra.	class PerroGu√≠a(Perro):
Polimorfismo:	Objetos diferentes pueden usar el mismo m√©todo de forma distinta.	ladrar() puede sonar diferente para cada perro

Por ejemplo, una silla (es una clase)
que tiene como atributos # De patas, respaldo, material, color, cualquier tama√±o, asiento 
M√©todos: que sea reclinable 0/1 
Permitir sentarse. Si tienen demasiado confort, dejan de ser una silla. 

C L A S E S 

En Python, una clase se define con la palabra clave class, y dentro de ella defines los atributos y m√©todos que tendr√°n los objetos que crees a partir de esa clase.

üß± ESTRUCTURA B√ÅSICA DE UNA CLASE EN PYTHON
python

class NombreDeLaClase:
    def __init__(self, atributo1, atributo2):
        self.atributo1 = atributo1
        self.atributo2 = atributo2

    def metodo(self):
        # Acci√≥n que realiza el objeto
        print("Hola, soy un m√©todo")
class: palabra clave para definir la clase.

__init__: es el constructor; se ejecuta al crear un objeto.

self: es una referencia al objeto actual.

üê∂ EJEMPLO: Clase Perro
python
Copiar
Editar
class Perro:
    def __init__(self, nombre, raza):
        self.nombre = nombre
        self.raza = raza

    def ladrar(self):
        print(f"{self.nombre} dice: ¬°Guau!")

# Crear un objeto de la clase
mi_perro = Perro("Fido", "Labrador")

# Llamar a un m√©todo
mi_perro.ladrar()
Salida:
yaml
Copiar
Editar
Fido dice: ¬°Guau!
‚úÖ PASO A PASO EXPLICADO
class Perro: ‚Üí defines la clase.

def __init__(self, nombre, raza): ‚Üí constructor que inicializa atributos.

self.nombre = nombre ‚Üí guarda el valor dentro del objeto.

def ladrar(self): ‚Üí m√©todo que imprime algo.

mi_perro = Perro("Fido", "Labrador") ‚Üí se crea un objeto.

mi_perro.ladrar() ‚Üí llama al m√©todo.

# CLASE MAM√çFERO
class Mamifero:
    vertebrado = true
    amamantan = true
    # atributos de la instancia
    alimentaci√≥n  / Carn√≠voro, omn√≠voro, herb√≠voro, etc.
    progenie 
    peso = 0
    altura  = 0 

    def = reproducirse(self, max_progenie): 
        self.progenie = choice(range(max_progenie))
    def crecer (self, crecimiento):
        self.altura = crecimiento
        self.peso = crecimiento * 0.4 + peso 


# instancia de la clase 
perro = mamifero()
perro.reproducirse(6)
print ("el tipo de alimentaci√≥n del perro es" , perro.alimentaci√≥n, "mide", perro.altura, "pesa", perro.altura, "altura")
perro.alimentacion = 'Carnivoro'
peso.altura = 43
perro.peso = 6.1
perro.progenie = 